{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44452,"status":"ok","timestamp":1708082351878,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"},"user_tz":0},"id":"oNVuquhQ83Bn","outputId":"f6bd4e0d-1227-4aab-d3f6-cfce6077bfdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Installing PyTorch Geometric\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.8/10.8 MB\u001b[0m \u001b[31m84.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.0/5.0 MB\u001b[0m \u001b[31m30.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling other libraries\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.2.1)\n","Collecting lovely-tensors\n","  Downloading lovely_tensors-0.1.15-py3-none-any.whl (17 kB)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from lovely-tensors) (2.1.0+cu121)\n","Collecting lovely-numpy>=0.2.9 (from lovely-tensors)\n","  Downloading lovely_numpy-0.2.11-py3-none-any.whl (24 kB)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from lovely-numpy>=0.2.9->lovely-tensors) (1.25.2)\n","Requirement already satisfied: fastcore in /usr/local/lib/python3.10/dist-packages (from lovely-numpy>=0.2.9->lovely-tensors) (1.5.29)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.10/dist-packages (from lovely-numpy>=0.2.9->lovely-tensors) (7.34.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from lovely-numpy>=0.2.9->lovely-tensors) (3.7.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (3.13.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (4.9.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (3.1.3)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (2023.6.0)\n","Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch->lovely-tensors) (2.1.0)\n","Requirement already satisfied: pip in /usr/local/lib/python3.10/dist-packages (from fastcore->lovely-numpy>=0.2.9->lovely-tensors) (23.1.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from fastcore->lovely-numpy>=0.2.9->lovely-tensors) (23.2)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (67.7.2)\n","Collecting jedi>=0.16 (from ipython->lovely-numpy>=0.2.9->lovely-tensors)\n","  Downloading jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.7.5)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (5.7.1)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (3.0.43)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (2.16.1)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.1.6)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython->lovely-numpy>=0.2.9->lovely-tensors) (4.9.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->lovely-tensors) (2.1.5)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (4.48.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (1.4.5)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (3.1.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (2.8.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->lovely-tensors) (1.3.0)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.8.3)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython->lovely-numpy>=0.2.9->lovely-tensors) (0.2.13)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->lovely-numpy>=0.2.9->lovely-tensors) (1.16.0)\n","Installing collected packages: jedi, lovely-numpy, lovely-tensors\n","Successfully installed jedi-0.19.1 lovely-numpy-0.2.11 lovely-tensors-0.1.15\n"]}],"source":["# Install required python libraries\n","import os\n","\n","# Install PyTorch Geometric and other libraries\n","if 'IS_GRADESCOPE_ENV' not in os.environ:\n","    print(\"Installing PyTorch Geometric\")\n","    !pip install -q torch-scatter -f https://data.pyg.org/whl/torch-2.1.0+cu121.html\n","    !pip install -q torch-sparse -f https://data.pyg.org/whl/torch-2.1.0+cu121.html\n","    !pip install -q torch-geometric\n","    print(\"Installing other libraries\")\n","    !pip install networkx\n","    !pip install lovely-tensors"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"baSS5Fgc86P3","executionInfo":{"status":"ok","timestamp":1708082366236,"user_tz":0,"elapsed":14362,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"8f16e244-48fa-4b73-ae1c-651f893865e7"},"outputs":[{"output_type":"stream","name":"stdout","text":["All imports succeeded.\n","Python version 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\n","PyTorch version 2.1.0+cu121\n","PyG version 2.5.0\n"]}],"source":["import os\n","import sys\n","import time\n","import math\n","import random\n","import itertools\n","from datetime import datetime\n","from typing import Mapping, Tuple, Sequence, List\n","\n","import pandas as pd\n","import networkx as nx\n","import numpy as np\n","import scipy as sp\n","\n","from tqdm.notebook import tqdm\n","\n","import torch\n","import torch.nn.functional as F\n","from torch.nn import Embedding, Linear, ReLU, BatchNorm1d, LayerNorm, Module, ModuleList, Sequential\n","from torch.nn import TransformerEncoder, TransformerEncoderLayer, MultiheadAttention\n","from torch.optim import Adam\n","\n","import torch_geometric\n","from torch_geometric.data import Data, Batch\n","from torch_geometric.loader import DataLoader\n","from torch_geometric.datasets import Planetoid\n","\n","import torch_geometric.transforms as T\n","from torch_geometric.utils import remove_self_loops, dense_to_sparse, to_dense_batch, to_dense_adj\n","\n","from torch_geometric.nn import GCNConv, GATConv\n","\n","from torch_scatter import scatter, scatter_mean, scatter_max, scatter_sum\n","\n","import lovely_tensors as lt\n","lt.monkey_patch()\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# import warnings\n","# warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n","# warnings.filterwarnings(\"ignore\", category=UserWarning)\n","# warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","\n","print(\"All imports succeeded.\")\n","print(\"Python version {}\".format(sys.version))\n","print(\"PyTorch version {}\".format(torch.__version__))\n","print(\"PyG version {}\".format(torch_geometric.__version__))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5DNRJPd9MZJ","executionInfo":{"status":"ok","timestamp":1708082366236,"user_tz":0,"elapsed":6,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"a4f2602c-9468-4be9-82f5-5049a611ec2c"},"outputs":[{"output_type":"stream","name":"stdout","text":["All seeds set.\n"]}],"source":["# Set random seed for deterministic results\n","\n","def seed(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = False\n","\n","seed(0)\n","print(\"All seeds set.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zxqw7J1H9O3R","executionInfo":{"status":"ok","timestamp":1708082370229,"user_tz":0,"elapsed":3997,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"b16a90fa-7996-4f39-cd51-e5450be724cb"},"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.x\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.tx\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.allx\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.y\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.ty\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.ally\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.graph\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.cora.test.index\n","Processing...\n","Done!\n"]}],"source":["# Download and load Cora dataset\n","dataset = 'Cora'\n","# transform = T.Compose([T.NormalizeFeatures(), T.GCNNorm(), T.ToSparseTensor()])\n","dataset = Planetoid('/tmp/Cora', dataset)\n","data = dataset[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":716},"id":"tnJjzUQ1QSPR","executionInfo":{"status":"ok","timestamp":1708082396324,"user_tz":0,"elapsed":26097,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"e951d3a1-76ee-41fd-fb34-230d6b826f90"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-449309cf93f5>:9: UserWarning: Sparse CSR tensor support is in beta state. If you miss a functionality in the sparse tensor support, please submit a feature request to https://github.com/pytorch/pytorch/issues. (Triggered internally at ../aten/src/ATen/SparseCsrTensorImpl.cpp:53.)\n","  adj_norm = torch.sparse.mm(torch.sparse.mm(D_tilde_inv_sqrt, A_tilde), D_tilde_inv_sqrt) # degree-normalised adjacency\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# adjacency matrices for Cora\n","A = to_dense_adj(data.edge_index, max_num_nodes = data.x.shape[0])[0]\n","A_tilde = A + torch.eye(A.shape[0])\n","D_tilde = torch.diag(torch.sum(A_tilde, axis=1))\n","D_tilde_inv_sqrt = torch.pow(D_tilde, -0.5)\n","D_tilde_inv_sqrt[torch.isinf(D_tilde_inv_sqrt)] = 0.0\n","A_tilde = A_tilde.to_sparse()\n","D_tilde_inv_sqrt = D_tilde_inv_sqrt.to_sparse()\n","adj_norm = torch.sparse.mm(torch.sparse.mm(D_tilde_inv_sqrt, A_tilde), D_tilde_inv_sqrt) # degree-normalised adjacency\n","L = torch.eye(adj_norm.shape[0]) - adj_norm  # graph laplacian\n","\n","# # Eigenvectors with numpy\n","# EigVal, EigVec = np.linalg.eig(L)\n","# idx = EigVal.argsort() # sort in increasing order\n","# EigVal, EigVec = EigVal[idx], np.real(EigVec[:,idx])\n","\n","plt.figure(figsize=(8, 8))\n","sns.heatmap(adj_norm.to_dense().numpy(), cmap='viridis', square=True)\n","plt.title('Adjacency Matrix Heatmap')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4miTxJel9o6x","executionInfo":{"status":"ok","timestamp":1708082465321,"user_tz":0,"elapsed":2053,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"8b49e047-5815-4a3c-a308-da9c3c2ef5c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0001, Loss: 1.9332 Train: 0.4429, Val: 0.2720, Test: 0.3030, Final Test: 0.3030\n","Epoch: 0002, Loss: 1.8697 Train: 0.7000, Val: 0.3360, Test: 0.3820, Final Test: 0.3820\n","Epoch: 0003, Loss: 1.7928 Train: 0.8571, Val: 0.4480, Test: 0.4590, Final Test: 0.4590\n","Epoch: 0004, Loss: 1.7250 Train: 0.9143, Val: 0.5040, Test: 0.5320, Final Test: 0.5320\n","Epoch: 0005, Loss: 1.6570 Train: 0.9714, Val: 0.5580, Test: 0.5840, Final Test: 0.5840\n","Epoch: 0006, Loss: 1.5715 Train: 0.9714, Val: 0.6080, Test: 0.6260, Final Test: 0.6260\n","Epoch: 0007, Loss: 1.4790 Train: 0.9857, Val: 0.6440, Test: 0.6660, Final Test: 0.6660\n","Epoch: 0008, Loss: 1.3856 Train: 0.9929, Val: 0.6640, Test: 0.6980, Final Test: 0.6980\n","Epoch: 0009, Loss: 1.2972 Train: 0.9929, Val: 0.7060, Test: 0.7210, Final Test: 0.7210\n","Epoch: 0010, Loss: 1.1684 Train: 0.9929, Val: 0.7120, Test: 0.7380, Final Test: 0.7380\n","Epoch: 0011, Loss: 1.0628 Train: 0.9929, Val: 0.7220, Test: 0.7490, Final Test: 0.7490\n","Epoch: 0012, Loss: 0.9656 Train: 0.9929, Val: 0.7420, Test: 0.7640, Final Test: 0.7640\n","Epoch: 0013, Loss: 0.8586 Train: 0.9929, Val: 0.7480, Test: 0.7620, Final Test: 0.7620\n","Epoch: 0014, Loss: 0.7267 Train: 1.0000, Val: 0.7540, Test: 0.7680, Final Test: 0.7680\n","Epoch: 0015, Loss: 0.6208 Train: 1.0000, Val: 0.7640, Test: 0.7730, Final Test: 0.7730\n","Epoch: 0016, Loss: 0.5273 Train: 1.0000, Val: 0.7620, Test: 0.7750, Final Test: 0.7730\n","Epoch: 0017, Loss: 0.4549 Train: 1.0000, Val: 0.7680, Test: 0.7800, Final Test: 0.7800\n","Epoch: 0018, Loss: 0.3549 Train: 1.0000, Val: 0.7660, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0019, Loss: 0.2843 Train: 1.0000, Val: 0.7600, Test: 0.7880, Final Test: 0.7800\n","Epoch: 0020, Loss: 0.2266 Train: 1.0000, Val: 0.7580, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0021, Loss: 0.1954 Train: 1.0000, Val: 0.7540, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0022, Loss: 0.1543 Train: 1.0000, Val: 0.7540, Test: 0.7880, Final Test: 0.7800\n","Epoch: 0023, Loss: 0.1131 Train: 1.0000, Val: 0.7560, Test: 0.7890, Final Test: 0.7800\n","Epoch: 0024, Loss: 0.0945 Train: 1.0000, Val: 0.7520, Test: 0.7900, Final Test: 0.7800\n","Epoch: 0025, Loss: 0.0742 Train: 1.0000, Val: 0.7540, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0026, Loss: 0.0537 Train: 1.0000, Val: 0.7540, Test: 0.7940, Final Test: 0.7800\n","Epoch: 0027, Loss: 0.0478 Train: 1.0000, Val: 0.7560, Test: 0.7960, Final Test: 0.7800\n","Epoch: 0028, Loss: 0.0294 Train: 1.0000, Val: 0.7620, Test: 0.7960, Final Test: 0.7800\n","Epoch: 0029, Loss: 0.0311 Train: 1.0000, Val: 0.7580, Test: 0.7980, Final Test: 0.7800\n","Epoch: 0030, Loss: 0.0294 Train: 1.0000, Val: 0.7560, Test: 0.8010, Final Test: 0.7800\n","Epoch: 0031, Loss: 0.0143 Train: 1.0000, Val: 0.7560, Test: 0.8010, Final Test: 0.7800\n","Epoch: 0032, Loss: 0.0150 Train: 1.0000, Val: 0.7560, Test: 0.8010, Final Test: 0.7800\n","Epoch: 0033, Loss: 0.0120 Train: 1.0000, Val: 0.7540, Test: 0.8050, Final Test: 0.7800\n","Epoch: 0034, Loss: 0.0094 Train: 1.0000, Val: 0.7560, Test: 0.8050, Final Test: 0.7800\n","Epoch: 0035, Loss: 0.0067 Train: 1.0000, Val: 0.7560, Test: 0.8030, Final Test: 0.7800\n","Epoch: 0036, Loss: 0.0071 Train: 1.0000, Val: 0.7560, Test: 0.8000, Final Test: 0.7800\n","Epoch: 0037, Loss: 0.0069 Train: 1.0000, Val: 0.7580, Test: 0.8000, Final Test: 0.7800\n","Epoch: 0038, Loss: 0.0068 Train: 1.0000, Val: 0.7560, Test: 0.7990, Final Test: 0.7800\n","Epoch: 0039, Loss: 0.0056 Train: 1.0000, Val: 0.7560, Test: 0.7970, Final Test: 0.7800\n","Epoch: 0040, Loss: 0.0039 Train: 1.0000, Val: 0.7580, Test: 0.7970, Final Test: 0.7800\n","Epoch: 0041, Loss: 0.0076 Train: 1.0000, Val: 0.7620, Test: 0.7960, Final Test: 0.7800\n","Epoch: 0042, Loss: 0.0020 Train: 1.0000, Val: 0.7640, Test: 0.7950, Final Test: 0.7800\n","Epoch: 0043, Loss: 0.0035 Train: 1.0000, Val: 0.7680, Test: 0.7960, Final Test: 0.7800\n","Epoch: 0044, Loss: 0.0021 Train: 1.0000, Val: 0.7640, Test: 0.7970, Final Test: 0.7800\n","Epoch: 0045, Loss: 0.0026 Train: 1.0000, Val: 0.7620, Test: 0.7970, Final Test: 0.7800\n","Epoch: 0046, Loss: 0.0018 Train: 1.0000, Val: 0.7600, Test: 0.7940, Final Test: 0.7800\n","Epoch: 0047, Loss: 0.0017 Train: 1.0000, Val: 0.7600, Test: 0.7940, Final Test: 0.7800\n","Epoch: 0048, Loss: 0.0014 Train: 1.0000, Val: 0.7600, Test: 0.7950, Final Test: 0.7800\n","Epoch: 0049, Loss: 0.0010 Train: 1.0000, Val: 0.7580, Test: 0.7930, Final Test: 0.7800\n","Epoch: 0050, Loss: 0.0011 Train: 1.0000, Val: 0.7540, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0051, Loss: 0.0013 Train: 1.0000, Val: 0.7540, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0052, Loss: 0.0018 Train: 1.0000, Val: 0.7520, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0053, Loss: 0.0007 Train: 1.0000, Val: 0.7500, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0054, Loss: 0.0009 Train: 1.0000, Val: 0.7500, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0055, Loss: 0.0006 Train: 1.0000, Val: 0.7520, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0056, Loss: 0.0015 Train: 1.0000, Val: 0.7520, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0057, Loss: 0.0011 Train: 1.0000, Val: 0.7520, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0058, Loss: 0.0008 Train: 1.0000, Val: 0.7520, Test: 0.7900, Final Test: 0.7800\n","Epoch: 0059, Loss: 0.0011 Train: 1.0000, Val: 0.7480, Test: 0.7900, Final Test: 0.7800\n","Epoch: 0060, Loss: 0.0008 Train: 1.0000, Val: 0.7500, Test: 0.7900, Final Test: 0.7800\n","Epoch: 0061, Loss: 0.0009 Train: 1.0000, Val: 0.7520, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0062, Loss: 0.0005 Train: 1.0000, Val: 0.7540, Test: 0.7910, Final Test: 0.7800\n","Epoch: 0063, Loss: 0.0010 Train: 1.0000, Val: 0.7540, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0064, Loss: 0.0005 Train: 1.0000, Val: 0.7520, Test: 0.7920, Final Test: 0.7800\n","Epoch: 0065, Loss: 0.0007 Train: 1.0000, Val: 0.7520, Test: 0.7900, Final Test: 0.7800\n","Epoch: 0066, Loss: 0.0005 Train: 1.0000, Val: 0.7540, Test: 0.7890, Final Test: 0.7800\n","Epoch: 0067, Loss: 0.0004 Train: 1.0000, Val: 0.7520, Test: 0.7870, Final Test: 0.7800\n","Epoch: 0068, Loss: 0.0005 Train: 1.0000, Val: 0.7520, Test: 0.7870, Final Test: 0.7800\n","Epoch: 0069, Loss: 0.0004 Train: 1.0000, Val: 0.7540, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0070, Loss: 0.0004 Train: 1.0000, Val: 0.7560, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0071, Loss: 0.0008 Train: 1.0000, Val: 0.7560, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0072, Loss: 0.0007 Train: 1.0000, Val: 0.7560, Test: 0.7850, Final Test: 0.7800\n","Epoch: 0073, Loss: 0.0019 Train: 1.0000, Val: 0.7560, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0074, Loss: 0.0007 Train: 1.0000, Val: 0.7540, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0075, Loss: 0.0004 Train: 1.0000, Val: 0.7540, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0076, Loss: 0.0003 Train: 1.0000, Val: 0.7540, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0077, Loss: 0.0004 Train: 1.0000, Val: 0.7520, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0078, Loss: 0.0004 Train: 1.0000, Val: 0.7520, Test: 0.7870, Final Test: 0.7800\n","Epoch: 0079, Loss: 0.0007 Train: 1.0000, Val: 0.7500, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0080, Loss: 0.0004 Train: 1.0000, Val: 0.7500, Test: 0.7860, Final Test: 0.7800\n","Epoch: 0081, Loss: 0.0010 Train: 1.0000, Val: 0.7500, Test: 0.7850, Final Test: 0.7800\n","Epoch: 0082, Loss: 0.0009 Train: 1.0000, Val: 0.7480, Test: 0.7840, Final Test: 0.7800\n","Epoch: 0083, Loss: 0.0005 Train: 1.0000, Val: 0.7480, Test: 0.7830, Final Test: 0.7800\n","Epoch: 0084, Loss: 0.0003 Train: 1.0000, Val: 0.7500, Test: 0.7830, Final Test: 0.7800\n","Epoch: 0085, Loss: 0.0006 Train: 1.0000, Val: 0.7480, Test: 0.7830, Final Test: 0.7800\n","Epoch: 0086, Loss: 0.0005 Train: 1.0000, Val: 0.7480, Test: 0.7830, Final Test: 0.7800\n","Epoch: 0087, Loss: 0.0003 Train: 1.0000, Val: 0.7460, Test: 0.7830, Final Test: 0.7800\n","Epoch: 0088, Loss: 0.0028 Train: 1.0000, Val: 0.7440, Test: 0.7800, Final Test: 0.7800\n","Epoch: 0089, Loss: 0.0007 Train: 1.0000, Val: 0.7440, Test: 0.7810, Final Test: 0.7800\n","Epoch: 0090, Loss: 0.0006 Train: 1.0000, Val: 0.7480, Test: 0.7800, Final Test: 0.7800\n","Epoch: 0091, Loss: 0.0007 Train: 1.0000, Val: 0.7460, Test: 0.7810, Final Test: 0.7800\n","Epoch: 0092, Loss: 0.0020 Train: 1.0000, Val: 0.7440, Test: 0.7810, Final Test: 0.7800\n","Epoch: 0093, Loss: 0.0031 Train: 1.0000, Val: 0.7440, Test: 0.7820, Final Test: 0.7800\n","Epoch: 0094, Loss: 0.0006 Train: 1.0000, Val: 0.7440, Test: 0.7770, Final Test: 0.7800\n","Epoch: 0095, Loss: 0.0004 Train: 1.0000, Val: 0.7460, Test: 0.7770, Final Test: 0.7800\n","Epoch: 0096, Loss: 0.0004 Train: 1.0000, Val: 0.7460, Test: 0.7770, Final Test: 0.7800\n","Epoch: 0097, Loss: 0.0008 Train: 1.0000, Val: 0.7480, Test: 0.7760, Final Test: 0.7800\n","Epoch: 0098, Loss: 0.0005 Train: 1.0000, Val: 0.7480, Test: 0.7760, Final Test: 0.7800\n","Epoch: 0099, Loss: 0.0003 Train: 1.0000, Val: 0.7480, Test: 0.7740, Final Test: 0.7800\n","Median time per epoch: 0.0125s\n"]}],"source":["# PyG example code: https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn2_cora.py\n","\n","class GNNModel(Module):\n","\n","    def __init__(\n","            self,\n","            in_dim: int = dataset.num_features,\n","            hidden_dim: int = 128,\n","            num_heads: int = 1,\n","            num_layers: int = 3,\n","            out_dim: int = dataset.num_classes,\n","            dropout: float = 0.5,\n","        ):\n","        super().__init__()\n","\n","        self.lin_in = Linear(in_dim, hidden_dim)\n","        self.lin_out = Linear(hidden_dim, out_dim)\n","\n","        self.layers = ModuleList()\n","        for layer in range(num_layers):\n","            self.layers.append(\n","                # GCNConv(hidden_dim, hidden_dim)\n","                GATConv(hidden_dim, hidden_dim // num_heads, num_heads)\n","            )\n","        self.dropout = dropout\n","\n","    def forward(self, x, edge_index):\n","\n","        x = self.lin_in(x)\n","\n","        for layer in self.layers:\n","            # conv -> activation ->  dropout -> residual\n","            x_in = x\n","            x = layer(x, edge_index)\n","            x = F.relu(x)\n","            x = F.dropout(x, self.dropout, training=self.training)\n","            x = x_in + x\n","\n","        x = self.lin_out(x)\n","\n","        return x.log_softmax(dim=-1)\n","\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model = GNNModel().to(device)\n","\n","data = data.to(device)\n","\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","\n","def train():\n","    model.train()\n","    optimizer.zero_grad()\n","    out = model(data.x, data.edge_index)\n","    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n","    loss.backward()\n","    optimizer.step()\n","    return float(loss)\n","\n","\n","@torch.no_grad()\n","def test():\n","    model.eval()\n","    pred, accs = model(data.x, data.edge_index).argmax(dim=-1), []\n","    for _, mask in data('train_mask', 'val_mask', 'test_mask'):\n","        accs.append(int((pred[mask] == data.y[mask]).sum()) / int(mask.sum()))\n","    return accs\n","\n","\n","best_val_acc = test_acc = 0\n","times = []\n","for epoch in range(1, 100):\n","    start = time.time()\n","    loss = train()\n","    train_acc, val_acc, tmp_test_acc = test()\n","    if val_acc > best_val_acc:\n","        best_val_acc = val_acc\n","        test_acc = tmp_test_acc\n","    print(f'Epoch: {epoch:04d}, Loss: {loss:.4f} Train: {train_acc:.4f}, '\n","          f'Val: {val_acc:.4f}, Test: {tmp_test_acc:.4f}, '\n","          f'Final Test: {test_acc:.4f}')\n","    times.append(time.time() - start)\n","print(f\"Median time per epoch: {torch.tensor(times).median():.4f}s\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-4fYeDvx903m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708083937864,"user_tz":0,"elapsed":7566,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"}},"outputId":"a76b6840-5ce7-4f8a-edfa-4f8f2b986c41"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0001, Loss: 1.9476 Train: 0.4786, Val: 0.1940, Test: 0.2280, Final Test: 0.2280\n","Epoch: 0002, Loss: 1.8941 Train: 0.8500, Val: 0.3220, Test: 0.3310, Final Test: 0.3310\n","Epoch: 0003, Loss: 1.8303 Train: 0.9500, Val: 0.4280, Test: 0.4340, Final Test: 0.4340\n","Epoch: 0004, Loss: 1.7743 Train: 0.9786, Val: 0.5240, Test: 0.5210, Final Test: 0.5210\n","Epoch: 0005, Loss: 1.7134 Train: 0.9786, Val: 0.5920, Test: 0.5790, Final Test: 0.5790\n","Epoch: 0006, Loss: 1.6496 Train: 0.9857, Val: 0.6480, Test: 0.6190, Final Test: 0.6190\n","Epoch: 0007, Loss: 1.5788 Train: 0.9929, Val: 0.6800, Test: 0.6600, Final Test: 0.6600\n","Epoch: 0008, Loss: 1.4952 Train: 1.0000, Val: 0.6980, Test: 0.6960, Final Test: 0.6960\n","Epoch: 0009, Loss: 1.4195 Train: 1.0000, Val: 0.7080, Test: 0.7260, Final Test: 0.7260\n","Epoch: 0010, Loss: 1.3315 Train: 1.0000, Val: 0.7180, Test: 0.7500, Final Test: 0.7500\n","Epoch: 0011, Loss: 1.2402 Train: 1.0000, Val: 0.7400, Test: 0.7590, Final Test: 0.7590\n","Epoch: 0012, Loss: 1.1325 Train: 1.0000, Val: 0.7460, Test: 0.7590, Final Test: 0.7590\n","Epoch: 0013, Loss: 1.0296 Train: 1.0000, Val: 0.7620, Test: 0.7690, Final Test: 0.7690\n","Epoch: 0014, Loss: 0.9265 Train: 1.0000, Val: 0.7640, Test: 0.7690, Final Test: 0.7690\n","Epoch: 0015, Loss: 0.7791 Train: 1.0000, Val: 0.7660, Test: 0.7790, Final Test: 0.7790\n","Epoch: 0016, Loss: 0.6475 Train: 1.0000, Val: 0.7620, Test: 0.7840, Final Test: 0.7790\n","Epoch: 0017, Loss: 0.5365 Train: 1.0000, Val: 0.7600, Test: 0.7830, Final Test: 0.7790\n","Epoch: 0018, Loss: 0.4442 Train: 1.0000, Val: 0.7620, Test: 0.7890, Final Test: 0.7790\n","Epoch: 0019, Loss: 0.3296 Train: 1.0000, Val: 0.7580, Test: 0.7840, Final Test: 0.7790\n","Epoch: 0020, Loss: 0.2712 Train: 1.0000, Val: 0.7580, Test: 0.7830, Final Test: 0.7790\n","Epoch: 0021, Loss: 0.2179 Train: 1.0000, Val: 0.7560, Test: 0.7820, Final Test: 0.7790\n","Epoch: 0022, Loss: 0.1871 Train: 1.0000, Val: 0.7540, Test: 0.7830, Final Test: 0.7790\n","Epoch: 0023, Loss: 0.1147 Train: 1.0000, Val: 0.7520, Test: 0.7880, Final Test: 0.7790\n","Epoch: 0024, Loss: 0.0996 Train: 1.0000, Val: 0.7520, Test: 0.7850, Final Test: 0.7790\n","Epoch: 0025, Loss: 0.0738 Train: 0.9929, Val: 0.7580, Test: 0.7820, Final Test: 0.7790\n","Epoch: 0026, Loss: 0.0647 Train: 1.0000, Val: 0.7600, Test: 0.7840, Final Test: 0.7790\n","Epoch: 0027, Loss: 0.0569 Train: 1.0000, Val: 0.7640, Test: 0.7920, Final Test: 0.7790\n","Epoch: 0028, Loss: 0.0322 Train: 1.0000, Val: 0.7660, Test: 0.7900, Final Test: 0.7790\n","Epoch: 0029, Loss: 0.0176 Train: 1.0000, Val: 0.7620, Test: 0.7910, Final Test: 0.7790\n","Epoch: 0030, Loss: 0.0284 Train: 1.0000, Val: 0.7600, Test: 0.7900, Final Test: 0.7790\n","Epoch: 0031, Loss: 0.0258 Train: 1.0000, Val: 0.7780, Test: 0.8020, Final Test: 0.8020\n","Epoch: 0032, Loss: 0.0089 Train: 1.0000, Val: 0.7780, Test: 0.8030, Final Test: 0.8020\n","Epoch: 0033, Loss: 0.0181 Train: 1.0000, Val: 0.7700, Test: 0.7890, Final Test: 0.8020\n","Epoch: 0034, Loss: 0.0075 Train: 1.0000, Val: 0.7640, Test: 0.7860, Final Test: 0.8020\n","Epoch: 0035, Loss: 0.0156 Train: 1.0000, Val: 0.7660, Test: 0.7840, Final Test: 0.8020\n","Epoch: 0036, Loss: 0.0118 Train: 1.0000, Val: 0.7600, Test: 0.7790, Final Test: 0.8020\n","Epoch: 0037, Loss: 0.0145 Train: 1.0000, Val: 0.7620, Test: 0.7800, Final Test: 0.8020\n","Epoch: 0038, Loss: 0.0036 Train: 1.0000, Val: 0.7600, Test: 0.7860, Final Test: 0.8020\n","Epoch: 0039, Loss: 0.0097 Train: 1.0000, Val: 0.7600, Test: 0.7930, Final Test: 0.8020\n","Epoch: 0040, Loss: 0.0063 Train: 1.0000, Val: 0.7660, Test: 0.7960, Final Test: 0.8020\n","Epoch: 0041, Loss: 0.0766 Train: 1.0000, Val: 0.7620, Test: 0.7970, Final Test: 0.8020\n","Epoch: 0042, Loss: 0.0050 Train: 1.0000, Val: 0.7660, Test: 0.7960, Final Test: 0.8020\n","Epoch: 0043, Loss: 0.0045 Train: 1.0000, Val: 0.7660, Test: 0.7910, Final Test: 0.8020\n","Epoch: 0044, Loss: 0.0035 Train: 1.0000, Val: 0.7660, Test: 0.7830, Final Test: 0.8020\n","Epoch: 0045, Loss: 0.0013 Train: 1.0000, Val: 0.7720, Test: 0.7800, Final Test: 0.8020\n","Epoch: 0046, Loss: 0.0017 Train: 1.0000, Val: 0.7740, Test: 0.7720, Final Test: 0.8020\n","Epoch: 0047, Loss: 0.0036 Train: 1.0000, Val: 0.7680, Test: 0.7670, Final Test: 0.8020\n","Epoch: 0048, Loss: 0.0038 Train: 1.0000, Val: 0.7600, Test: 0.7600, Final Test: 0.8020\n","Epoch: 0049, Loss: 0.0088 Train: 1.0000, Val: 0.7660, Test: 0.7680, Final Test: 0.8020\n","Epoch: 0050, Loss: 0.0029 Train: 1.0000, Val: 0.7700, Test: 0.7740, Final Test: 0.8020\n","Epoch: 0051, Loss: 0.0011 Train: 1.0000, Val: 0.7700, Test: 0.7770, Final Test: 0.8020\n","Epoch: 0052, Loss: 0.0007 Train: 1.0000, Val: 0.7700, Test: 0.7790, Final Test: 0.8020\n","Epoch: 0053, Loss: 0.0244 Train: 1.0000, Val: 0.7660, Test: 0.7730, Final Test: 0.8020\n","Epoch: 0054, Loss: 0.0018 Train: 1.0000, Val: 0.7560, Test: 0.7650, Final Test: 0.8020\n","Epoch: 0055, Loss: 0.0010 Train: 1.0000, Val: 0.7480, Test: 0.7570, Final Test: 0.8020\n","Epoch: 0056, Loss: 0.0031 Train: 1.0000, Val: 0.7400, Test: 0.7500, Final Test: 0.8020\n","Epoch: 0057, Loss: 0.0234 Train: 1.0000, Val: 0.7480, Test: 0.7470, Final Test: 0.8020\n","Epoch: 0058, Loss: 0.0047 Train: 1.0000, Val: 0.7540, Test: 0.7500, Final Test: 0.8020\n","Epoch: 0059, Loss: 0.0017 Train: 1.0000, Val: 0.7580, Test: 0.7420, Final Test: 0.8020\n","Epoch: 0060, Loss: 0.0075 Train: 1.0000, Val: 0.7600, Test: 0.7450, Final Test: 0.8020\n","Epoch: 0061, Loss: 0.0061 Train: 1.0000, Val: 0.7640, Test: 0.7520, Final Test: 0.8020\n","Epoch: 0062, Loss: 0.0048 Train: 1.0000, Val: 0.7680, Test: 0.7580, Final Test: 0.8020\n","Epoch: 0063, Loss: 0.0031 Train: 1.0000, Val: 0.7680, Test: 0.7630, Final Test: 0.8020\n","Epoch: 0064, Loss: 0.0053 Train: 1.0000, Val: 0.7700, Test: 0.7680, Final Test: 0.8020\n","Epoch: 0065, Loss: 0.0012 Train: 1.0000, Val: 0.7640, Test: 0.7680, Final Test: 0.8020\n","Epoch: 0066, Loss: 0.0060 Train: 1.0000, Val: 0.7540, Test: 0.7720, Final Test: 0.8020\n","Epoch: 0067, Loss: 0.0036 Train: 1.0000, Val: 0.7460, Test: 0.7720, Final Test: 0.8020\n","Epoch: 0068, Loss: 0.0076 Train: 1.0000, Val: 0.7440, Test: 0.7720, Final Test: 0.8020\n","Epoch: 0069, Loss: 0.0036 Train: 1.0000, Val: 0.7400, Test: 0.7710, Final Test: 0.8020\n","Epoch: 0070, Loss: 0.0014 Train: 1.0000, Val: 0.7400, Test: 0.7700, Final Test: 0.8020\n","Epoch: 0071, Loss: 0.0032 Train: 1.0000, Val: 0.7420, Test: 0.7680, Final Test: 0.8020\n","Epoch: 0072, Loss: 0.0189 Train: 1.0000, Val: 0.7460, Test: 0.7700, Final Test: 0.8020\n","Epoch: 0073, Loss: 0.0027 Train: 1.0000, Val: 0.7360, Test: 0.7660, Final Test: 0.8020\n","Epoch: 0074, Loss: 0.0019 Train: 1.0000, Val: 0.7380, Test: 0.7630, Final Test: 0.8020\n","Epoch: 0075, Loss: 0.0025 Train: 1.0000, Val: 0.7400, Test: 0.7660, Final Test: 0.8020\n","Epoch: 0076, Loss: 0.0064 Train: 1.0000, Val: 0.7380, Test: 0.7660, Final Test: 0.8020\n","Epoch: 0077, Loss: 0.0052 Train: 1.0000, Val: 0.7380, Test: 0.7670, Final Test: 0.8020\n","Epoch: 0078, Loss: 0.0017 Train: 1.0000, Val: 0.7340, Test: 0.7680, Final Test: 0.8020\n","Epoch: 0079, Loss: 0.0103 Train: 1.0000, Val: 0.7400, Test: 0.7720, Final Test: 0.8020\n","Epoch: 0080, Loss: 0.0068 Train: 1.0000, Val: 0.7480, Test: 0.7780, Final Test: 0.8020\n","Epoch: 0081, Loss: 0.0080 Train: 1.0000, Val: 0.7560, Test: 0.7830, Final Test: 0.8020\n","Epoch: 0082, Loss: 0.0007 Train: 1.0000, Val: 0.7640, Test: 0.7870, Final Test: 0.8020\n","Epoch: 0083, Loss: 0.0017 Train: 1.0000, Val: 0.7660, Test: 0.7920, Final Test: 0.8020\n","Epoch: 0084, Loss: 0.0017 Train: 1.0000, Val: 0.7700, Test: 0.7930, Final Test: 0.8020\n","Epoch: 0085, Loss: 0.0016 Train: 1.0000, Val: 0.7660, Test: 0.7930, Final Test: 0.8020\n","Epoch: 0086, Loss: 0.0046 Train: 1.0000, Val: 0.7680, Test: 0.7890, Final Test: 0.8020\n","Epoch: 0087, Loss: 0.0006 Train: 1.0000, Val: 0.7600, Test: 0.7810, Final Test: 0.8020\n","Epoch: 0088, Loss: 0.0009 Train: 1.0000, Val: 0.7600, Test: 0.7780, Final Test: 0.8020\n","Epoch: 0089, Loss: 0.0010 Train: 1.0000, Val: 0.7640, Test: 0.7770, Final Test: 0.8020\n","Epoch: 0090, Loss: 0.0009 Train: 1.0000, Val: 0.7580, Test: 0.7760, Final Test: 0.8020\n","Epoch: 0091, Loss: 0.0006 Train: 1.0000, Val: 0.7520, Test: 0.7760, Final Test: 0.8020\n","Epoch: 0092, Loss: 0.0006 Train: 1.0000, Val: 0.7520, Test: 0.7690, Final Test: 0.8020\n","Epoch: 0093, Loss: 0.0012 Train: 1.0000, Val: 0.7480, Test: 0.7670, Final Test: 0.8020\n","Epoch: 0094, Loss: 0.0013 Train: 1.0000, Val: 0.7500, Test: 0.7640, Final Test: 0.8020\n","Epoch: 0095, Loss: 0.0011 Train: 1.0000, Val: 0.7460, Test: 0.7630, Final Test: 0.8020\n","Epoch: 0096, Loss: 0.0012 Train: 1.0000, Val: 0.7480, Test: 0.7620, Final Test: 0.8020\n","Epoch: 0097, Loss: 0.0017 Train: 1.0000, Val: 0.7440, Test: 0.7620, Final Test: 0.8020\n","Epoch: 0098, Loss: 0.0018 Train: 1.0000, Val: 0.7400, Test: 0.7620, Final Test: 0.8020\n","Epoch: 0099, Loss: 0.0009 Train: 1.0000, Val: 0.7360, Test: 0.7610, Final Test: 0.8020\n","Median time per epoch: 0.0706s\n"]}],"source":["class SparseGraphTransformerModel(Module):\n","\n","    def __init__(\n","            self,\n","            in_dim: int = dataset.num_features,\n","            hidden_dim: int = 128,\n","            num_heads: int = 4,\n","            num_layers: int = 3,\n","            out_dim: int = dataset.num_classes,\n","            dropout: float = 0.5,\n","        ):\n","        super().__init__()\n","\n","        self.lin_in = Linear(in_dim, hidden_dim)\n","        self.lin_out = Linear(hidden_dim, out_dim)\n","\n","        self.layers = ModuleList()\n","        for layer in range(num_layers):\n","            self.layers.append(\n","                # TransformerEncoderLayer(\n","                #     d_model = hidden_dim,\n","                #     nhead = num_heads,\n","                #     dim_feedforward = hidden_dim * 2,\n","                #     dropout = dropout,\n","                # )\n","                MultiheadAttention(\n","                    embed_dim = hidden_dim,\n","                    num_heads = num_heads,\n","                    dropout = dropout\n","                )\n","            )\n","        # self.encoder = TransformerEncoder(\n","        #     TransformerEncoderLayer(\n","        #         d_model = hidden_dim,\n","        #         nhead = num_heads,\n","        #         dim_feedforward = hidden_dim * 2,\n","        #         dropout = dropout,\n","        #     ),\n","        #     num_layers\n","        # )\n","\n","        self.dropout = dropout\n","\n","    def forward(self, x, dense_adj):\n","\n","        x = self.lin_in(x)\n","\n","        # TransformerEncoder\n","        # x = self.encoder(x, mask = ~dense_adj.bool())\n","\n","        for layer in self.layers:\n","            # # TransformerEncoderLayer\n","            # # boolean mask enforces graph structure\n","            # x = layer(x, src_mask = ~dense_adj.bool())\n","\n","            # MHSA layer\n","            # boolean mask enforces graph structure\n","            x_in = x\n","            x = layer(\n","                x, x, x,\n","                attn_mask = ~dense_adj.bool(),\n","            )[0]\n","            x = F.relu(x)\n","            x = F.dropout(x, self.dropout, training=self.training)\n","            x = x_in + x\n","\n","        x = self.lin_out(x)\n","\n","        return x.log_softmax(dim=-1)\n","\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model = SparseGraphTransformerModel().to(device)\n","\n","data.dense_adj = to_dense_adj(data.edge_index, max_num_nodes = data.x.shape[0])[0]\n","data = data.to(device)\n","\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","\n","def train():\n","    model.train()\n","    optimizer.zero_grad()\n","    out = model(data.x, data.dense_adj)\n","    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n","    loss.backward()\n","    optimizer.step()\n","    return float(loss)\n","\n","\n","@torch.no_grad()\n","def test():\n","    model.eval()\n","    pred, accs = model(data.x, data.dense_adj).argmax(dim=-1), []\n","    for _, mask in data('train_mask', 'val_mask', 'test_mask'):\n","        accs.append(int((pred[mask] == data.y[mask]).sum()) / int(mask.sum()))\n","    return accs\n","\n","\n","best_val_acc = test_acc = 0\n","times = []\n","for epoch in range(1, 100):\n","    start = time.time()\n","    loss = train()\n","    train_acc, val_acc, tmp_test_acc = test()\n","    if val_acc > best_val_acc:\n","        best_val_acc = val_acc\n","        test_acc = tmp_test_acc\n","    print(f'Epoch: {epoch:04d}, Loss: {loss:.4f} Train: {train_acc:.4f}, '\n","          f'Val: {val_acc:.4f}, Test: {tmp_test_acc:.4f}, '\n","          f'Final Test: {test_acc:.4f}')\n","    times.append(time.time() - start)\n","print(f\"Median time per epoch: {torch.tensor(times).median():.4f}s\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lug9F1Re91KN"},"outputs":[],"source":["def get_shortest_path_matrix(adjacency_matrix):\n","    # Convert the adjacency matrix to a NetworkX graph\n","    graph = nx.from_numpy_array(adjacency_matrix.cpu().numpy(), create_using=nx.DiGraph)\n","    # Compute the shortest path matrix using Floyd-Warshall algorithm in NetworkX\n","    shortest_path_matrix = nx.floyd_warshall_numpy(graph)\n","    # Convert numpy array back to torch tensor\n","    shortest_path_matrix = torch.tensor(shortest_path_matrix).float()\n","    return shortest_path_matrix\n","\n","dense_adj = to_dense_adj(data.edge_index, max_num_nodes = data.x.shape[0])[0]\n","dense_shortest_path_matrix = get_shortest_path_matrix(dense_adj)  # takes about 1-2 mins"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7710,"status":"ok","timestamp":1708086516223,"user":{"displayName":"Chaitanya Joshi","userId":"08808406495602139513"},"user_tz":0},"id":"eJDmOkbTHtUM","outputId":"1525ca59-0b4e-413b-d551-a4207d3cd3a7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0001, Loss: 1.9466 Train: 0.5643, Val: 0.2660, Test: 0.2670, Final Test: 0.2670\n","Epoch: 0002, Loss: 1.8866 Train: 0.8500, Val: 0.3860, Test: 0.3550, Final Test: 0.3550\n","Epoch: 0003, Loss: 1.8286 Train: 0.9286, Val: 0.4580, Test: 0.4280, Final Test: 0.4280\n","Epoch: 0004, Loss: 1.7715 Train: 0.9714, Val: 0.5320, Test: 0.5050, Final Test: 0.5050\n","Epoch: 0005, Loss: 1.7114 Train: 0.9929, Val: 0.5820, Test: 0.5620, Final Test: 0.5620\n","Epoch: 0006, Loss: 1.6447 Train: 1.0000, Val: 0.6200, Test: 0.5940, Final Test: 0.5940\n","Epoch: 0007, Loss: 1.5750 Train: 1.0000, Val: 0.6360, Test: 0.6130, Final Test: 0.6130\n","Epoch: 0008, Loss: 1.5013 Train: 1.0000, Val: 0.6480, Test: 0.6300, Final Test: 0.6300\n","Epoch: 0009, Loss: 1.4139 Train: 1.0000, Val: 0.6660, Test: 0.6360, Final Test: 0.6360\n","Epoch: 0010, Loss: 1.3326 Train: 1.0000, Val: 0.6580, Test: 0.6390, Final Test: 0.6360\n","Epoch: 0011, Loss: 1.2422 Train: 1.0000, Val: 0.6620, Test: 0.6440, Final Test: 0.6360\n","Epoch: 0012, Loss: 1.1256 Train: 1.0000, Val: 0.6620, Test: 0.6480, Final Test: 0.6360\n","Epoch: 0013, Loss: 1.0354 Train: 1.0000, Val: 0.6720, Test: 0.6490, Final Test: 0.6490\n","Epoch: 0014, Loss: 0.9109 Train: 1.0000, Val: 0.6740, Test: 0.6490, Final Test: 0.6490\n","Epoch: 0015, Loss: 0.8277 Train: 1.0000, Val: 0.6680, Test: 0.6510, Final Test: 0.6490\n","Epoch: 0016, Loss: 0.7218 Train: 1.0000, Val: 0.6560, Test: 0.6550, Final Test: 0.6490\n","Epoch: 0017, Loss: 0.6168 Train: 1.0000, Val: 0.6620, Test: 0.6620, Final Test: 0.6490\n","Epoch: 0018, Loss: 0.5254 Train: 1.0000, Val: 0.6760, Test: 0.6710, Final Test: 0.6710\n","Epoch: 0019, Loss: 0.4446 Train: 1.0000, Val: 0.7000, Test: 0.6880, Final Test: 0.6880\n","Epoch: 0020, Loss: 0.3407 Train: 1.0000, Val: 0.7260, Test: 0.7230, Final Test: 0.7230\n","Epoch: 0021, Loss: 0.2607 Train: 1.0000, Val: 0.7400, Test: 0.7400, Final Test: 0.7400\n","Epoch: 0022, Loss: 0.2175 Train: 1.0000, Val: 0.7560, Test: 0.7580, Final Test: 0.7580\n","Epoch: 0023, Loss: 0.1674 Train: 1.0000, Val: 0.7580, Test: 0.7830, Final Test: 0.7830\n","Epoch: 0024, Loss: 0.1143 Train: 1.0000, Val: 0.7760, Test: 0.8010, Final Test: 0.8010\n","Epoch: 0025, Loss: 0.1070 Train: 1.0000, Val: 0.7780, Test: 0.8000, Final Test: 0.8000\n","Epoch: 0026, Loss: 0.0715 Train: 1.0000, Val: 0.7880, Test: 0.7970, Final Test: 0.7970\n","Epoch: 0027, Loss: 0.0548 Train: 1.0000, Val: 0.7900, Test: 0.7970, Final Test: 0.7970\n","Epoch: 0028, Loss: 0.0402 Train: 1.0000, Val: 0.7820, Test: 0.7960, Final Test: 0.7970\n","Epoch: 0029, Loss: 0.0435 Train: 1.0000, Val: 0.7860, Test: 0.7960, Final Test: 0.7970\n","Epoch: 0030, Loss: 0.0198 Train: 1.0000, Val: 0.7800, Test: 0.7840, Final Test: 0.7970\n","Epoch: 0031, Loss: 0.0364 Train: 1.0000, Val: 0.7700, Test: 0.7640, Final Test: 0.7970\n","Epoch: 0032, Loss: 0.0274 Train: 1.0000, Val: 0.7440, Test: 0.7470, Final Test: 0.7970\n","Epoch: 0033, Loss: 0.0301 Train: 1.0000, Val: 0.7340, Test: 0.7250, Final Test: 0.7970\n","Epoch: 0034, Loss: 0.0321 Train: 1.0000, Val: 0.7280, Test: 0.7270, Final Test: 0.7970\n","Epoch: 0035, Loss: 0.0313 Train: 1.0000, Val: 0.7360, Test: 0.7340, Final Test: 0.7970\n","Epoch: 0036, Loss: 0.0449 Train: 1.0000, Val: 0.7440, Test: 0.7520, Final Test: 0.7970\n","Epoch: 0037, Loss: 0.0108 Train: 1.0000, Val: 0.7480, Test: 0.7620, Final Test: 0.7970\n","Epoch: 0038, Loss: 0.0151 Train: 1.0000, Val: 0.7540, Test: 0.7690, Final Test: 0.7970\n","Epoch: 0039, Loss: 0.0101 Train: 1.0000, Val: 0.7580, Test: 0.7640, Final Test: 0.7970\n","Epoch: 0040, Loss: 0.0266 Train: 1.0000, Val: 0.7500, Test: 0.7610, Final Test: 0.7970\n","Epoch: 0041, Loss: 0.0233 Train: 1.0000, Val: 0.7420, Test: 0.7620, Final Test: 0.7970\n","Epoch: 0042, Loss: 0.0122 Train: 1.0000, Val: 0.7460, Test: 0.7630, Final Test: 0.7970\n","Epoch: 0043, Loss: 0.0108 Train: 1.0000, Val: 0.7540, Test: 0.7650, Final Test: 0.7970\n","Epoch: 0044, Loss: 0.0081 Train: 1.0000, Val: 0.7580, Test: 0.7740, Final Test: 0.7970\n","Epoch: 0045, Loss: 0.0100 Train: 1.0000, Val: 0.7680, Test: 0.7790, Final Test: 0.7970\n","Epoch: 0046, Loss: 0.0069 Train: 1.0000, Val: 0.7740, Test: 0.7760, Final Test: 0.7970\n","Epoch: 0047, Loss: 0.0052 Train: 1.0000, Val: 0.7800, Test: 0.7780, Final Test: 0.7970\n","Epoch: 0048, Loss: 0.0082 Train: 1.0000, Val: 0.7840, Test: 0.7860, Final Test: 0.7970\n","Epoch: 0049, Loss: 0.0081 Train: 1.0000, Val: 0.7860, Test: 0.7860, Final Test: 0.7970\n","Epoch: 0050, Loss: 0.0036 Train: 1.0000, Val: 0.7860, Test: 0.7820, Final Test: 0.7970\n","Epoch: 0051, Loss: 0.0028 Train: 1.0000, Val: 0.7780, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0052, Loss: 0.0179 Train: 1.0000, Val: 0.7740, Test: 0.7790, Final Test: 0.7970\n","Epoch: 0053, Loss: 0.0053 Train: 1.0000, Val: 0.7720, Test: 0.7810, Final Test: 0.7970\n","Epoch: 0054, Loss: 0.0021 Train: 1.0000, Val: 0.7760, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0055, Loss: 0.0046 Train: 1.0000, Val: 0.7760, Test: 0.7780, Final Test: 0.7970\n","Epoch: 0056, Loss: 0.0034 Train: 1.0000, Val: 0.7700, Test: 0.7730, Final Test: 0.7970\n","Epoch: 0057, Loss: 0.0045 Train: 1.0000, Val: 0.7680, Test: 0.7650, Final Test: 0.7970\n","Epoch: 0058, Loss: 0.0025 Train: 1.0000, Val: 0.7680, Test: 0.7650, Final Test: 0.7970\n","Epoch: 0059, Loss: 0.0041 Train: 1.0000, Val: 0.7700, Test: 0.7650, Final Test: 0.7970\n","Epoch: 0060, Loss: 0.0095 Train: 1.0000, Val: 0.7700, Test: 0.7650, Final Test: 0.7970\n","Epoch: 0061, Loss: 0.0159 Train: 1.0000, Val: 0.7700, Test: 0.7660, Final Test: 0.7970\n","Epoch: 0062, Loss: 0.0025 Train: 1.0000, Val: 0.7620, Test: 0.7670, Final Test: 0.7970\n","Epoch: 0063, Loss: 0.0027 Train: 1.0000, Val: 0.7600, Test: 0.7680, Final Test: 0.7970\n","Epoch: 0064, Loss: 0.0019 Train: 1.0000, Val: 0.7620, Test: 0.7680, Final Test: 0.7970\n","Epoch: 0065, Loss: 0.0021 Train: 1.0000, Val: 0.7640, Test: 0.7710, Final Test: 0.7970\n","Epoch: 0066, Loss: 0.0015 Train: 1.0000, Val: 0.7560, Test: 0.7720, Final Test: 0.7970\n","Epoch: 0067, Loss: 0.0022 Train: 1.0000, Val: 0.7540, Test: 0.7720, Final Test: 0.7970\n","Epoch: 0068, Loss: 0.0017 Train: 1.0000, Val: 0.7560, Test: 0.7700, Final Test: 0.7970\n","Epoch: 0069, Loss: 0.0029 Train: 1.0000, Val: 0.7600, Test: 0.7740, Final Test: 0.7970\n","Epoch: 0070, Loss: 0.0041 Train: 1.0000, Val: 0.7600, Test: 0.7750, Final Test: 0.7970\n","Epoch: 0071, Loss: 0.0057 Train: 1.0000, Val: 0.7600, Test: 0.7740, Final Test: 0.7970\n","Epoch: 0072, Loss: 0.0020 Train: 1.0000, Val: 0.7620, Test: 0.7730, Final Test: 0.7970\n","Epoch: 0073, Loss: 0.0026 Train: 1.0000, Val: 0.7640, Test: 0.7720, Final Test: 0.7970\n","Epoch: 0074, Loss: 0.0023 Train: 1.0000, Val: 0.7640, Test: 0.7720, Final Test: 0.7970\n","Epoch: 0075, Loss: 0.0032 Train: 1.0000, Val: 0.7680, Test: 0.7710, Final Test: 0.7970\n","Epoch: 0076, Loss: 0.0021 Train: 1.0000, Val: 0.7740, Test: 0.7760, Final Test: 0.7970\n","Epoch: 0077, Loss: 0.0021 Train: 1.0000, Val: 0.7760, Test: 0.7770, Final Test: 0.7970\n","Epoch: 0078, Loss: 0.0014 Train: 1.0000, Val: 0.7780, Test: 0.7790, Final Test: 0.7970\n","Epoch: 0079, Loss: 0.0022 Train: 1.0000, Val: 0.7800, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0080, Loss: 0.0023 Train: 1.0000, Val: 0.7800, Test: 0.7820, Final Test: 0.7970\n","Epoch: 0081, Loss: 0.0028 Train: 1.0000, Val: 0.7760, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0082, Loss: 0.0015 Train: 1.0000, Val: 0.7760, Test: 0.7820, Final Test: 0.7970\n","Epoch: 0083, Loss: 0.0013 Train: 1.0000, Val: 0.7800, Test: 0.7800, Final Test: 0.7970\n","Epoch: 0084, Loss: 0.0015 Train: 1.0000, Val: 0.7800, Test: 0.7800, Final Test: 0.7970\n","Epoch: 0085, Loss: 0.0014 Train: 1.0000, Val: 0.7800, Test: 0.7810, Final Test: 0.7970\n","Epoch: 0086, Loss: 0.0013 Train: 1.0000, Val: 0.7800, Test: 0.7800, Final Test: 0.7970\n","Epoch: 0087, Loss: 0.0008 Train: 1.0000, Val: 0.7780, Test: 0.7800, Final Test: 0.7970\n","Epoch: 0088, Loss: 0.0014 Train: 1.0000, Val: 0.7800, Test: 0.7810, Final Test: 0.7970\n","Epoch: 0089, Loss: 0.0020 Train: 1.0000, Val: 0.7800, Test: 0.7810, Final Test: 0.7970\n","Epoch: 0090, Loss: 0.0010 Train: 1.0000, Val: 0.7800, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0091, Loss: 0.0010 Train: 1.0000, Val: 0.7800, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0092, Loss: 0.0018 Train: 1.0000, Val: 0.7800, Test: 0.7830, Final Test: 0.7970\n","Epoch: 0093, Loss: 0.0016 Train: 1.0000, Val: 0.7800, Test: 0.7860, Final Test: 0.7970\n","Epoch: 0094, Loss: 0.0009 Train: 1.0000, Val: 0.7760, Test: 0.7850, Final Test: 0.7970\n","Epoch: 0095, Loss: 0.0017 Train: 1.0000, Val: 0.7780, Test: 0.7850, Final Test: 0.7970\n","Epoch: 0096, Loss: 0.0011 Train: 1.0000, Val: 0.7740, Test: 0.7850, Final Test: 0.7970\n","Epoch: 0097, Loss: 0.0018 Train: 1.0000, Val: 0.7740, Test: 0.7840, Final Test: 0.7970\n","Epoch: 0098, Loss: 0.0068 Train: 1.0000, Val: 0.7740, Test: 0.7840, Final Test: 0.7970\n","Epoch: 0099, Loss: 0.0007 Train: 1.0000, Val: 0.7760, Test: 0.7820, Final Test: 0.7970\n","Median time per epoch: 0.0721s\n"]}],"source":["class DenseGraphTransformerModel(Module):\n","\n","    def __init__(\n","            self,\n","            in_dim: int = dataset.num_features,\n","            pos_enc_dim: int = 16,\n","            hidden_dim: int = 128,\n","            num_heads: int = 4,\n","            num_layers: int = 3,\n","            out_dim: int = dataset.num_classes,\n","            dropout: float = 0.5,\n","        ):\n","        super().__init__()\n","\n","        self.lin_in = Linear(in_dim, hidden_dim)\n","        self.lin_pos_enc = Linear(pos_enc_dim, hidden_dim)\n","        self.lin_out = Linear(hidden_dim, out_dim)\n","\n","        self.layers = ModuleList()\n","        for layer in range(num_layers):\n","            self.layers.append(\n","                # TransformerEncoderLayer(\n","                #     d_model = hidden_dim,\n","                #     nhead = num_heads,\n","                #     dim_feedforward = hidden_dim * 2,\n","                #     dropout = dropout,\n","                # )\n","                MultiheadAttention(\n","                    embed_dim = hidden_dim,\n","                    num_heads = num_heads,\n","                    dropout = dropout\n","                )\n","            )\n","        # self.encoder = TransformerEncoder(\n","        #     TransformerEncoderLayer(\n","        #         d_model = hidden_dim,\n","        #         nhead = num_heads,\n","        #         dim_feedforward = hidden_dim * 2,\n","        #         dropout = dropout,\n","        #     ),\n","        #     num_layers\n","        # )\n","\n","        self.attn_bias_scale = torch.nn.Parameter(torch.tensor([10.0]))  # controls how much we initially bias our model to nearby nodes\n","        self.dropout = dropout\n","\n","    def forward(self, x, pos_enc, dense_sp_matrix):\n","\n","        # x = self.lin_in(x) + self.lin_pos_enc(pos_enc)\n","        x = self.lin_in(x)  # no node positional encoding\n","\n","        # attention bias\n","        # [i, j] -> inverse of shortest path distance b/w node i and j\n","        # diagonals -> self connection, set to 0\n","        # disconnected nodes -> -1\n","        attn_bias = self.attn_bias_scale * torch.nan_to_num(\n","            (1 / (torch.nan_to_num(dense_sp_matrix, nan=-1, posinf=-1, neginf=-1))),\n","            nan=0, posinf=0, neginf=0\n","        )\n","\n","        # TransformerEncoder\n","        # x = self.encoder(x, mask = ~dense_adj.bool())\n","\n","        for layer in self.layers:\n","            # # TransformerEncoderLayer\n","            # # float mask adds learnable additive attention bias\n","            # x = layer(x, src_mask = dense_adj.float())\n","\n","            # MHSA layer\n","            # float mask adds learnable additive attention bias\n","            x_in = x\n","            x = layer(x, x, x, attn_mask = attn_bias)[0]\n","            x = F.relu(x)\n","            x = F.dropout(x, self.dropout, training=self.training)\n","            x = x_in + x\n","\n","        x = self.lin_out(x)\n","\n","        return x.log_softmax(dim=-1)\n","\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model = DenseGraphTransformerModel().to(device)\n","\n","# data = T.AddLaplacianEigenvectorPE(k = 16, attr_name = 'pos_enc')(data)\n","# data = T.AddRandomWalkPE(walk_length = 16, attr_name = 'pos_enc')(data)\n","data.dense_adj = to_dense_adj(data.edge_index, max_num_nodes = data.x.shape[0])[0]\n","data.dense_sp_matrix = dense_shortest_path_matrix.float()  # pre-computed in previous cell\n","data = data.to(device)\n","\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","\n","def train():\n","    model.train()\n","    optimizer.zero_grad()\n","    out = model(data.x, data.pos_enc, data.dense_sp_matrix)\n","    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n","    loss.backward()\n","    optimizer.step()\n","    return float(loss)\n","\n","\n","@torch.no_grad()\n","def test():\n","    model.eval()\n","    pred, accs = model(data.x, data.pos_enc, data.dense_sp_matrix).argmax(dim=-1), []\n","    for _, mask in data('train_mask', 'val_mask', 'test_mask'):\n","        accs.append(int((pred[mask] == data.y[mask]).sum()) / int(mask.sum()))\n","    return accs\n","\n","\n","best_val_acc = test_acc = 0\n","times = []\n","for epoch in range(1, 100):\n","    start = time.time()\n","    loss = train()\n","    train_acc, val_acc, tmp_test_acc = test()\n","    if val_acc > best_val_acc:\n","        best_val_acc = val_acc\n","        test_acc = tmp_test_acc\n","    print(f'Epoch: {epoch:04d}, Loss: {loss:.4f} Train: {train_acc:.4f}, '\n","          f'Val: {val_acc:.4f}, Test: {tmp_test_acc:.4f}, '\n","          f'Final Test: {test_acc:.4f}')\n","    times.append(time.time() - start)\n","print(f\"Median time per epoch: {torch.tensor(times).median():.4f}s\")\n","\n","# Notes\n","# - Dense Transformer needs to be trained for a bit longer to reach low loss value\n","# - Node positional encodings are not particularly useful\n","# - Edge distance encodings are very useful\n","# - Since Cora is highly homophilic, it is important to bias the attention towards nearby nodes"]},{"cell_type":"code","source":[],"metadata":{"id":"vNl73jfJ13Sf"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}